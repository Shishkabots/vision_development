import cv2
import numpy
import math
#from enum import Enum

class GripPipelinepython:
    """
    An OpenCV pipeline generated by GRIP.
    """
    
<<<<<<< HEAD

    """initializes all values to presets or None if need to be set
    """

__resize_image_width = 640.0
__resize_image_height = 480.0
__resize_image_interpolation = cv2.INTER_CUBIC

resize_image_output = None

__hsv_threshold_input = resize_image_output
__hsv_threshold_hue = [0.0, 69.39393939393939]
__hsv_threshold_saturation = [0.0, 143.3838383838384]
__hsv_threshold_value = [178.8669064748201, 255.0]

hsv_threshold_output = None

__cv_erode_src = hsv_threshold_output
__cv_erode_kernel = None
__cv_erode_anchor = (-1, -1)
__cv_erode_iterations = 1.0
__cv_erode_bordertype = cv2.BORDER_CONSTANT
__cv_erode_bordervalue = (-1)

cv_erode_output = None

__mask_input = resize_image_output
__mask_mask = cv_erode_output

mask_output = None

__find_contours_input = hsv_threshold_output
__find_contours_external_only = False

find_contours_output = None

__filter_contours_contours = find_contours_output
__filter_contours_min_area = 0.0
__filter_contours_min_perimeter = 0.0
__filter_contours_min_width = 50.0
__filter_contours_max_width = 1000.0
__filter_contours_min_height = 50.0
__filter_contours_max_height = 1000.0
__filter_contours_solidity = [0, 100]
__filter_contours_max_vertices = 4.0
__filter_contours_min_vertices = 0.0
__filter_contours_min_ratio = 0.0
__filter_contours_max_ratio = 1000.0

filter_contours_output = None


def process(source0):
=======
    
    """initializes all values to presets or None if need to be set
    """

    __resize_image_width = 640.0
    __resize_image_height = 480.0
    __resize_image_interpolation = cv2.INTER_CUBIC

    resize_image_output = None

    __hsv_threshold_input = resize_image_output
    __hsv_threshold_hue = [0.0, 69.39393939393939]
    __hsv_threshold_saturation = [0.0, 143.3838383838384]
    __hsv_threshold_value = [178.8669064748201, 255.0]

    hsv_threshold_output = None

    __cv_erode_src = hsv_threshold_output
    __cv_erode_kernel = None
    __cv_erode_anchor = (-1, -1)
    __cv_erode_iterations = 1.0
    __cv_erode_bordertype = cv2.BORDER_CONSTANT
    __cv_erode_bordervalue = (-1)

    cv_erode_output = None

    __mask_input = resize_image_output
    __mask_mask = cv_erode_output

    mask_output = None

    __find_contours_input = hsv_threshold_output
    __find_contours_external_only = False

    find_contours_output = None

    __filter_contours_contours = find_contours_output
    __filter_contours_min_area = 0.0
    __filter_contours_min_perimeter = 0.0
    __filter_contours_min_width = 50.0
    __filter_contours_max_width = 1000.0
    __filter_contours_min_height = 50.0
    __filter_contours_max_height = 1000.0
    __filter_contours_solidity = [0, 100]
    __filter_contours_max_vertices = 4.0
    __filter_contours_min_vertices = 0.0
    __filter_contours_min_ratio = 0.0
    __filter_contours_max_ratio = 1000.0

    filter_contours_output = None


    def process(source0):
>>>>>>> e6f1e9a5bf41c431d60754a21540325ff90a3600
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step Resize_Image0:
        __resize_image_input = source0
        (resize_image_output) = __resize_image(__resize_image_input, __resize_image_width, __resize_image_height, __resize_image_interpolation)

        # Step HSV_Threshold0:
        __hsv_threshold_input = resize_image_output
        (hsv_threshold_output) = __hsv_threshold(__hsv_threshold_input, __hsv_threshold_hue, __hsv_threshold_saturation, __hsv_threshold_value)

        # Step CV_erode0:
        __cv_erode_src = hsv_threshold_output
        (cv_erode_output) = __cv_erode(__cv_erode_src, __cv_erode_kernel, __cv_erode_anchor, __cv_erode_iterations, __cv_erode_bordertype, __cv_erode_bordervalue)

        # Step Mask0:
        __mask_input = resize_image_output
        __mask_mask = cv_erode_output
        (mask_output) = __mask(__mask_input, __mask_mask)

        # Step Find_Contours0:
        __find_contours_input = hsv_threshold_output
        (find_contours_output) = __find_contours(__find_contours_input, __find_contours_external_only)

        # Step Filter_Contours0:
        __filter_contours_contours = find_contours_output
        (filter_contours_output) = __filter_contours(__filter_contours_contours, __filter_contours_min_area, __filter_contours_min_perimeter, __filter_contours_min_width, __filter_contours_max_width, __filter_contours_min_height, __filter_contours_max_height, __filter_contours_solidity, __filter_contours_max_vertices, __filter_contours_min_vertices, __filter_contours_min_ratio, __filter_contours_max_ratio)


<<<<<<< HEAD

def __resize_image(input, width, height, interpolation):
=======
    @staticmethod
    def __resize_image(input, width, height, interpolation):
>>>>>>> e6f1e9a5bf41c431d60754a21540325ff90a3600
        """Scales and image to an exact size.
        Args:
            input: A numpy.ndarray.
            Width: The desired width in pixels.
            Height: The desired height in pixels.
            interpolation: Opencv enum for the type fo interpolation.
        Returns:
            A numpy.ndarray of the new size.
        """
        return cv2.resize(input, ((int)(width), (int)(height)), 0, 0, interpolation)

<<<<<<< HEAD
def __hsv_threshold(input, hue, sat, val):
=======
    @staticmethod
    def __hsv_threshold(input, hue, sat, val):
>>>>>>> e6f1e9a5bf41c431d60754a21540325ff90a3600
        """Segment an image based on hue, saturation, and value ranges.
        Args:
            input: A BGR numpy.ndarray.
            hue: A list of two numbers the are the min and max hue.
            sat: A list of two numbers the are the min and max saturation.
            lum: A list of two numbers the are the min and max value.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2HSV)
        return cv2.inRange(out, (hue[0], sat[0], val[0]),  (hue[1], sat[1], val[1]))

<<<<<<< HEAD

def __cv_erode(src, kernel, anchor, iterations, border_type, border_value):
=======
    @staticmethod
    def __cv_erode(src, kernel, anchor, iterations, border_type, border_value):
>>>>>>> e6f1e9a5bf41c431d60754a21540325ff90a3600
        """Expands area of lower value in an image.
        Args:
           src: A numpy.ndarray.
           kernel: The kernel for erosion. A numpy.ndarray.
           iterations: the number of times to erode.
           border_type: Opencv enum that represents a border type.
           border_value: value to be used for a constant border.
        Returns:
            A numpy.ndarray after erosion.
        """
        return cv2.erode(src, kernel, anchor, iterations = (int) (iterations +0.5),
                            borderType = border_type, borderValue = border_value)

<<<<<<< HEAD

def __mask(input, mask):
=======
    @staticmethod
    def __mask(input, mask):
>>>>>>> e6f1e9a5bf41c431d60754a21540325ff90a3600
        """Filter out an area of an image using a binary mask.
        Args:
            input: A three channel numpy.ndarray.
            mask: A black and white numpy.ndarray.
        Returns:
            A three channel numpy.ndarray.
        """
        return cv2.bitwise_and(input, input, mask=mask)

<<<<<<< HEAD

def __find_contours(input, external_only):
=======
    @staticmethod
    def __find_contours(input, external_only):
>>>>>>> e6f1e9a5bf41c431d60754a21540325ff90a3600
        """Sets the values of pixels in a binary image to their distance to the nearest black pixel.
        Args:
            input: A numpy.ndarray.
            external_only: A boolean. If true only external contours are found.
        Return:
            A list of numpy.ndarray where each one represents a contour.
        """
        if(external_only):
            mode = cv2.RETR_EXTERNAL
        else:
            mode = cv2.RETR_LIST
        method = cv2.CHAIN_APPROX_SIMPLE
        im2, contours, hierarchy =cv2.findContours(input, mode=mode, method=method)
        return contours

<<<<<<< HEAD

def __filter_contours(input_contours, min_area, min_perimeter, min_width, max_width,
=======
    @staticmethod
    def __filter_contours(input_contours, min_area, min_perimeter, min_width, max_width,
>>>>>>> e6f1e9a5bf41c431d60754a21540325ff90a3600
                        min_height, max_height, solidity, max_vertex_count, min_vertex_count,
                        min_ratio, max_ratio):
        """Filters out contours that do not meet certain criteria.
        Args:
            input_contours: Contours as a list of numpy.ndarray.
            min_area: The minimum area of a contour that will be kept.
            min_perimeter: The minimum perimeter of a contour that will be kept.
            min_width: Minimum width of a contour.
            max_width: MaxWidth maximum width.
            min_height: Minimum height.
            max_height: Maximimum height.
            solidity: The minimum and maximum solidity of a contour.
            min_vertex_count: Minimum vertex Count of the contours.
            max_vertex_count: Maximum vertex Count.
            min_ratio: Minimum ratio of width to height.
            max_ratio: Maximum ratio of width to height.
        Returns:
            Contours as a list of numpy.ndarray.
        """
        output = []
        for contour in input_contours:
            x,y,w,h = cv2.boundingRect(contour)
<<<<<<< HEAD
            print(x, y, w, h)
            cx = x + w/2
            cy = y + h/2
            print("CX: ", cx)
            print("CY: ", cy)
=======
>>>>>>> e6f1e9a5bf41c431d60754a21540325ff90a3600
            if (w < min_width or w > max_width):
                continue
            if (h < min_height or h > max_height):
                continue
            area = cv2.contourArea(contour)
            if (area < min_area):
                continue
            if (cv2.arcLength(contour, True) < min_perimeter):
                continue
            hull = cv2.convexHull(contour)
            solid = 100 * area / cv2.contourArea(hull)
            if (solid < solidity[0] or solid > solidity[1]):
                continue
            if (len(contour) < min_vertex_count or len(contour) > max_vertex_count):
                continue
            ratio = (float)(w) / h
            if (ratio < min_ratio or ratio > max_ratio):
                continue
            output.append(contour)
        return output
<<<<<<< HEAD
img = cv2.imread(C:\Users\asjgu\Desktop\vision_development-master\grip,0)
process(img)
x, y, w, h = cv2.boundingRect(filter_contours_output.get(0))
print(x, y, w, h)
cx = x + w/2
cy = y + h/2
print("CX: ", cx)
print("CY: ", cy)
=======

    img = cv2.imread('star.jpg',0)
    process(img)
    x, y, w, h = cv2.boundingRect(filter_contours_output.get(0))
    cx = x+w/2
    cy = y+h/2
    print("CX: ", cx)
    print("CX: ", cx)
>>>>>>> e6f1e9a5bf41c431d60754a21540325ff90a3600




